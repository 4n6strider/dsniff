.TH ARPSPOOF 8
.ad
.fi
.SH NAME
arpspoof
\-
intercept packets on a switched LAN
.SH SYNOPSIS
.na
.nf
.fi
\fBarpspoof\fR [-v] [\fB-i \fIinterface\fR] [\fB-c \fIown|host|both\fR] [\fB-m \fImodel[/prefixlength]\fR] [\fB-x\fR] [\fB-r\fR] [\fItarget[/prefixlength]\fR]
.SH DESCRIPTION
.ad
.fi
\fBarpspoof\fR redirects packets from a target host (or all hosts)
on the LAN intended for another host on the LAN by forging ARP
replies.  This is an extremely effective way of sniffing traffic on a
switch.
.LP
Kernel IP forwarding (or a userland program which accomplishes the
same, e.g. fragrouter(8)) must be turned on ahead of time.
.SH OPTIONS
.IP "\fB-v\fR"
Make arpspoof verbose about what it is doing.
.IP "\fB-i \fIinterface\fR"
Specify the interface to use.
.IP "\fB-c \fIown|host|both\fR"
Specify which hardware address to use when restoring the arp configuration;
while cleaning up, packets can be send with the own address as well as with
the address of the host. Sending packets with a fake hw address can disrupt
connectivity with certain switch/ap/bridge configurations, however it works
more reliably than using the own address, which is the default way arpspoof
cleans up afterwards.
.IP "\fB-m \fImodel[/prefixlength]\fR"
Specify which host(s) to imitate.
.IP "\fB-r\fR"
Poison both hosts (model and target) in classic mitm style to capture traffic in both directions.
.IP "\fB-x\fR"
Enable cross-poisoning: consider each host a potential target for receiving fake arp packets as
well as a model to imitate; this way, it is possible to intercept all communication between hosts.
.IP \fItarget[/prefixlength]\fR
Any additional arguments will be considered targets which will receive spoofed arp packets, poisoning
their arp caches. Traffic from these hosts to the ones specified as models will be intercepted.
.SH "SEE ALSO"
dsniff(8), fragrouter(8)
.SH AUTHOR
.na
.nf
Dug Song <dugsong@monkey.org>
